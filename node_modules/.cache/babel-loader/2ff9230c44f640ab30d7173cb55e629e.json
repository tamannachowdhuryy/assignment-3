{"ast":null,"code":"var _jsxFileName = \"/Users/zeeshan/Desktop/Computer Science/CS395/Assignment-4/client/src/components/containers/EditStudentContainer.js\";\n/*==================================================\nEditStudentContainer.js\n\nThe Container component is responsible for stateful logic and data fetching, and\npasses data (if any) as props to the corresponding View component.\nIf needed, it also defines the component's \"connect\" function.\n================================================== */\nimport Header from './Header';\nimport { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\nimport { fetchStudentThunk, editStudentThunk } from '../../store/thunks';\nimport EditStudentView from \"../views/EditStudentView\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass EditStudentContainer extends Component {\n  // Initialize state\n  constructor(props) {\n    super(props);\n    this.handleChange = event => {\n      this.setState({\n        [event.target.name]: event.target.value\n      });\n    };\n    this.handleSubmit = async event => {\n      event.preventDefault(); // Prevent browser reload/refresh after submit\n\n      const firstName = event.target.firstname.value;\n      const lastName = event.target.lastname.value;\n      const email = event.target.email.value;\n      if (firstName.trim() !== firstName || lastName.trim() !== lastName || email.trim() !== email) {\n        alert(\"Please make sure first name and last name are filled in or that they don't have whitespace\");\n        return;\n      }\n      let student = {\n        id: this.props.student.id,\n        firstname: this.state.firstname === \"\" ? this.props.student.firstname : this.state.firstname,\n        lastname: this.state.lastname === \"\" ? this.props.student.lastname : this.state.lastname,\n        email: this.state.email === \"\" ? this.props.student.email : this.state.email,\n        imageUrl: this.state.imageUrl == null ? this.props.student.imageUrl : this.state.imageUrl,\n        gpa: this.state.gpa == null ? this.props.student.gpa : this.state.gpa,\n        campusId: this.state.campusId === null ? this.props.student.campusId : this.state.campusId\n      };\n\n      // Edit student in back-end database\n      console.log(student);\n      await this.props.editStudent(student);\n\n      // Update state, and trigger redirect to show new student\n      this.setState({\n        firstname: \"\",\n        lastname: \"\",\n        email: \"\",\n        imageUrl: null,\n        gpa: null,\n        campusId: null,\n        redirect: true,\n        redirectId: this.props.student.id\n      });\n    };\n    this.state = {\n      id: null,\n      firstname: \"\",\n      lastname: \"\",\n      email: \"\",\n      imageUrl: null,\n      gpa: null,\n      campusId: null,\n      redirect: false,\n      redirectId: null\n    };\n  }\n  componentDidMount() {\n    this.props.fetchStudent(this.props.match.params.id);\n  }\n\n  // Capture input data when it is entered\n\n  // Unmount when the component is being removed from the DOM:\n  componentWillUnmount() {\n    this.setState({\n      redirect: false,\n      redirectId: null\n    });\n  }\n\n  // Render new student input form\n  render() {\n    // Redirect to new student's page after submit\n    if (this.state.redirect) {\n      return /*#__PURE__*/_jsxDEV(Redirect, {\n        to: `/student/${this.state.redirectId}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 21\n      }, this);\n    }\n\n    // Display the input form via the corresponding View component\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(EditStudentView, {\n        handleChange: this.handleChange,\n        handleSubmit: this.handleSubmit,\n        student: this.props.student\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 13\n    }, this);\n  }\n}\nconst mapState = state => {\n  return {\n    student: state.student\n  };\n};\n\n// The following input argument is passed to the \"connect\" function used by \"NewStudentContainer\" component to connect to Redux Store.\n// The \"mapDispatch\" argument is used to dispatch Action (Redux Thunk) to Redux Store.\n// The \"mapDispatch\" calls the specific Thunk to dispatch its action. The \"dispatch\" is a function of Redux Store.\nconst mapDispatch = dispatch => {\n  return {\n    editStudent: student => dispatch(editStudentThunk(student)),\n    fetchStudent: studentId => dispatch(fetchStudentThunk(studentId))\n  };\n};\n\n// Export store-connected container by default\n// NewStudentContainer uses \"connect\" function to connect to Redux Store and to read values from the Stores \n// (and re-read the values when the Store State updates).\nexport default connect(mapState, mapDispatch)(EditStudentContainer);","map":{"version":3,"names":["Header","Component","connect","Redirect","fetchStudentThunk","editStudentThunk","EditStudentView","EditStudentContainer","constructor","props","handleChange","event","setState","target","name","value","handleSubmit","preventDefault","firstName","firstname","lastName","lastname","email","trim","alert","student","id","state","imageUrl","gpa","campusId","console","log","editStudent","redirect","redirectId","componentDidMount","fetchStudent","match","params","componentWillUnmount","render","mapState","mapDispatch","dispatch","studentId"],"sources":["/Users/zeeshan/Desktop/Computer Science/CS395/Assignment-4/client/src/components/containers/EditStudentContainer.js"],"sourcesContent":["/*==================================================\nEditStudentContainer.js\n\nThe Container component is responsible for stateful logic and data fetching, and\npasses data (if any) as props to the corresponding View component.\nIf needed, it also defines the component's \"connect\" function.\n================================================== */\nimport Header from './Header';\nimport { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\n\nimport { fetchStudentThunk, editStudentThunk} from '../../store/thunks';\nimport EditStudentView from \"../views/EditStudentView\";\n\nclass EditStudentContainer extends Component {\n    // Initialize state\n    constructor(props){\n        super(props);\n        this.state = {\n            id: null,\n            firstname: \"\",\n            lastname: \"\",\n            email: \"\",\n            imageUrl: null,\n            gpa: null, \n            campusId: null,\n            redirect: false,\n            redirectId: null\n        };\n    }\n\n    componentDidMount() {\n        this.props.fetchStudent(this.props.match.params.id)\n    }\n\n    // Capture input data when it is entered\n    handleChange = event => {\n        this.setState({\n            [event.target.name]: event.target.value\n        });\n    }\n\n    // Take action after user click the submit button\n    handleSubmit = async event => {\n        event.preventDefault(); // Prevent browser reload/refresh after submit\n\n        const firstName = event.target.firstname.value;\n        const lastName = event.target.lastname.value;\n        const email = event.target.email.value;\n\n        if(firstName.trim() !== firstName || lastName.trim() !== lastName || email.trim() !== email){\n            alert(\"Please make sure first name and last name are filled in or that they don't have whitespace\")\n            return;\n        }\n\n        let student = {\n            id: this.props.student.id,\n            firstname: this.state.firstname === \"\" ? this.props.student.firstname : this.state.firstname,\n            lastname: this.state.lastname === \"\" ? this.props.student.lastname : this.state.lastname,\n            email: this.state.email === \"\" ? this.props.student.email : this.state.email,\n            imageUrl: this.state.imageUrl == null ? this.props.student.imageUrl : this.state.imageUrl,\n            gpa: this.state.gpa == null ? this.props.student.gpa : this.state.gpa,\n            campusId: this.state.campusId === null ? this.props.student.campusId : this.state.campusId           \n        };\n\n        // Edit student in back-end database\n        console.log(student)\n        await this.props.editStudent(student);\n\n        // Update state, and trigger redirect to show new student\n        this.setState({\n            firstname: \"\", \n            lastname: \"\",\n            email: \"\",\n            imageUrl: null,\n            gpa: null,\n            campusId: null, \n            redirect: true, \n            redirectId: this.props.student.id            \n        });        \n    }\n\n    // Unmount when the component is being removed from the DOM:\n    componentWillUnmount() {\n        this.setState({redirect: false, redirectId: null});\n    }\n\n    // Render new student input form\n    render() {\n        // Redirect to new student's page after submit\n        if(this.state.redirect) {\n            return (<Redirect to={`/student/${this.state.redirectId}`}/>)\n        }\n\n        // Display the input form via the corresponding View component\n        return (\n            <div>\n                <Header />\n                <EditStudentView \n                    handleChange = {this.handleChange} \n                    handleSubmit={this.handleSubmit}\n                    student = {this.props.student}      \n                />\n            </div>          \n        );\n    }\n}\n\nconst mapState = (state) => {\n    return {\n        student: state.student,\n    };\n};\n\n// The following input argument is passed to the \"connect\" function used by \"NewStudentContainer\" component to connect to Redux Store.\n// The \"mapDispatch\" argument is used to dispatch Action (Redux Thunk) to Redux Store.\n// The \"mapDispatch\" calls the specific Thunk to dispatch its action. The \"dispatch\" is a function of Redux Store.\nconst mapDispatch = (dispatch) => {\n    return{\n        editStudent: (student) => dispatch(editStudentThunk(student)),\n        fetchStudent: (studentId) => dispatch(fetchStudentThunk(studentId)),\n    };\n};\n\n// Export store-connected container by default\n// NewStudentContainer uses \"connect\" function to connect to Redux Store and to read values from the Stores \n// (and re-read the values when the Store State updates).\nexport default connect(mapState, mapDispatch)(EditStudentContainer);"],"mappings":"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"},"metadata":{},"sourceType":"module"}