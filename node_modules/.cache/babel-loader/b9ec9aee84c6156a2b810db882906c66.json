{"ast":null,"code":"var _jsxFileName = \"/home/tamanna/Desktop/spring_2024/csci 39548/Projects/final-project-client/src/components/containers/EditCampusContainer.js\";\n/*==================================================\nEditCampusContainer.js\n\nThe Container component is responsible for stateful logic and data fetching, and\npasses data (if any) as props to the corresponding View component.\nIf needed, it also defines the component's \"connect\" function.\n================================================== */\nimport Header from './Header';\nimport { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\nimport { fetchCampusThunk, editCampusThunk } from '../../store/thunks';\nimport EditCampusView from '../views/EditCampusView';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass EditCampusContainer extends Component {\n  // Initialize state\n  constructor(props) {\n    super(props);\n    this.handleChange = event => {\n      this.setState({\n        [event.target.name]: event.target.value\n      });\n    };\n    this.handleSubmit = async event => {\n      event.preventDefault(); // Prevent browser reload/refresh after submit.\n\n      const name = event.target.name.value;\n      const address = event.target.address.value;\n      if (name.trim() !== name || address.trim() !== address) {\n        alert(\"Please make sure name and address are filled in or that they don't have whitespace\");\n        return;\n      }\n      let campus = {\n        name: this.state.name === \"\" ? this.props.campus.name : this.state.name,\n        address: this.state.address === \"\" ? this.props.campus.address : this.state.address,\n        description: this.state.description == null ? this.props.campus.description : this.state.description,\n        imageUrl: this.state.imageUrl === null ? this.props.campus.imageUrl : this.state.imageUrl,\n        id: this.props.campus.id\n      };\n\n      // Edit campus in back-end database\n      await this.props.editCampus(campus);\n\n      // Update state, and trigger redirect to show the new campus\n      this.setState({\n        name: \"\",\n        address: \"\",\n        description: null,\n        imageUrl: null,\n        redirect: true,\n        redirectId: this.props.campus.id\n      });\n    };\n    this.state = {\n      name: \"\",\n      address: \"\",\n      description: null,\n      imageUrl: null,\n      redirect: false,\n      redirectId: null\n    };\n  }\n  componentDidMount() {\n    this.props.fetchCampus(this.props.match.params.id);\n  }\n\n  // Capture input data when it is entered\n\n  // Unmount when the component is being removed from the DOM:\n  componentWillUnmount() {\n    this.setState({\n      redirect: false,\n      redirectId: null\n    });\n  }\n\n  // Render new campus input form\n  render() {\n    // Redirect to new campus's page after submit\n    if (this.state.redirect) {\n      return /*#__PURE__*/_jsxDEV(Redirect, {\n        to: `/campus/${this.state.redirectId}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 15\n      }, this);\n    }\n\n    // Display the input form via the corresponding View component\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(EditCampusView, {\n        handleChange: this.handleChange,\n        handleSubmit: this.handleSubmit,\n        campus: this.props.campus\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this);\n  }\n}\nconst mapState = state => {\n  return {\n    campus: state.campus\n  };\n};\n\n// The following input argument is passed to the \"connect\" function used by \"NewCampusContainer\" component to connect to Redux Store.\n// The \"mapDispatch\" argument is used to dispatch Action (Redux Thunk) to Redux Store.\n// The \"mapDispatch\" calls the specific Thunk to dispatch its action. The \"dispatch\" is a function of Redux Store.\nconst mapDispatch = dispatch => {\n  return {\n    editCampus: campus => dispatch(editCampusThunk(campus)),\n    fetchCampus: campusId => dispatch(fetchCampusThunk(campusId))\n  };\n};\n\n// Export store-connected container by default\n// NewCampusContainer uses \"connect\" function to connect to Redux Store and to read values from the Store \n// (and re-read the values when the Store State updates).\nexport default connect(mapState, mapDispatch)(EditCampusContainer);","map":{"version":3,"names":["Header","Component","connect","Redirect","fetchCampusThunk","editCampusThunk","EditCampusView","EditCampusContainer","constructor","props","handleChange","event","setState","target","name","value","handleSubmit","preventDefault","address","trim","alert","campus","state","description","imageUrl","id","editCampus","redirect","redirectId","componentDidMount","fetchCampus","match","params","componentWillUnmount","render","mapState","mapDispatch","dispatch","campusId"],"sources":["/home/tamanna/Desktop/spring_2024/csci 39548/Projects/final-project-client/src/components/containers/EditCampusContainer.js"],"sourcesContent":["/*==================================================\nEditCampusContainer.js\n\nThe Container component is responsible for stateful logic and data fetching, and\npasses data (if any) as props to the corresponding View component.\nIf needed, it also defines the component's \"connect\" function.\n================================================== */\nimport Header from './Header';\nimport { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\n\nimport { fetchCampusThunk, editCampusThunk } from '../../store/thunks';\nimport EditCampusView from '../views/EditCampusView';\n\nclass EditCampusContainer extends Component {\n  // Initialize state\n  constructor(props){\n    super(props);\n    this.state = { \n      name: \"\",\n      address: \"\",\n      description: null,\n      imageUrl: null, \n      redirect: false, \n      redirectId: null,\n    };\n  }\n\n  componentDidMount() {\n    this.props.fetchCampus(this.props.match.params.id)\n  }\n\n  // Capture input data when it is entered\n  handleChange = event => {\n    this.setState({\n      [event.target.name]: event.target.value\n    });\n  }\n\n  // Take action after user click the submit button\n  handleSubmit = async event => {\n    event.preventDefault();  // Prevent browser reload/refresh after submit.\n\n    const name = event.target.name.value;\n    const address = event.target.address.value;\n    \n    if(name.trim() !== name || address.trim() !== address){\n      alert(\"Please make sure name and address are filled in or that they don't have whitespace\")\n      return;\n    }\n\n\n    let campus = {\n        name: this.state.name === \"\" ? this.props.campus.name : this.state.name,\n        address: this.state.address === \"\" ? this.props.campus.address : this.state.address,\n        description: this.state.description == null ? this.props.campus.description : this.state.description,\n        imageUrl: this.state.imageUrl === null ? this.props.campus.imageUrl : this.state.imageUrl,\n        id: this.props.campus.id\n    };\n    \n    // Edit campus in back-end database\n    await this.props.editCampus(campus);\n\n    // Update state, and trigger redirect to show the new campus\n    this.setState({\n      name: \"\",\n      address: \"\",\n      description: null,\n      imageUrl: null,\n      redirect: true, \n      redirectId: this.props.campus.id\n    });\n  }\n\n  // Unmount when the component is being removed from the DOM:\n  componentWillUnmount() {\n      this.setState({redirect: false, redirectId: null});\n  }\n\n  // Render new campus input form\n  render() {\n    // Redirect to new campus's page after submit\n    if(this.state.redirect) {\n      return (<Redirect to={`/campus/${this.state.redirectId}`}/>)\n    }\n\n    // Display the input form via the corresponding View component\n    return (\n      <div>\n        <Header />\n        <EditCampusView \n          handleChange = {this.handleChange} \n          handleSubmit={this.handleSubmit} \n          campus = {this.props.campus}     \n        />\n      </div>          \n    );\n  }\n}\n\nconst mapState = (state) => {\n    return {\n        campus: state.campus,\n    };\n}\n\n// The following input argument is passed to the \"connect\" function used by \"NewCampusContainer\" component to connect to Redux Store.\n// The \"mapDispatch\" argument is used to dispatch Action (Redux Thunk) to Redux Store.\n// The \"mapDispatch\" calls the specific Thunk to dispatch its action. The \"dispatch\" is a function of Redux Store.\nconst mapDispatch = (dispatch) => {\n    return({\n        editCampus: (campus) => dispatch(editCampusThunk(campus)),\n        fetchCampus: (campusId) => dispatch(fetchCampusThunk(campusId)),\n    })\n}\n\n// Export store-connected container by default\n// NewCampusContainer uses \"connect\" function to connect to Redux Store and to read values from the Store \n// (and re-read the values when the Store State updates).\nexport default connect(mapState, mapDispatch)(EditCampusContainer);"],"mappings":"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"},"metadata":{},"sourceType":"module"}