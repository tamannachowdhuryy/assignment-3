{"ast":null,"code":"/*==================================================\n/src/store/thunks.js\n\nIt contains all Thunk Creators and Thunks.\n================================================== */\nimport * as ac from './actions/actionCreators'; // Import Action Creators (\"ac\" keyword Action Creator)\nconst axios = require('axios');\n\n//All Campuses\n// THUNK CREATOR:\nexport const fetchAllCampusesThunk = () => async dispatch => {\n  // The THUNK\n  try {\n    // API \"get\" call to get \"campuses\" data from database\n    let res = await axios.get(`/api/campuses`);\n    // Call Action Creator to return Action object (type + payload with \"campuses\" data)\n    // Then dispatch the Action object to Reducer to update state \n    dispatch(ac.fetchAllCampuses(res.data));\n  } catch (err) {\n    console.error(err);\n  }\n};\n\n// Add Campus\n// THUNK CREATOR:\nexport const addCampusThunk = campus => async dispatch => {\n  // The THUNK\n  try {\n    // API \"post\" call to add \"campus\" object's datat to database\n    let res = await axios.post(`/api/campuses`, campus);\n    // Call Action Creator to return Action object (type + payload with new campus data)\n    // Then dispatch the Action object to Reducer to update state\n    dispatch(ac.addCampus(res.data));\n    return res.data;\n  } catch (err) {\n    console.error(err);\n  }\n};\n\n// Delete Campus\n// THUNK CREATOR: \nexport const deleteCampusThunk = campusId => async dispatch => {\n  // The THUNK\n  try {\n    // API \"delete\" call to delete campus (based on \"campusID\") from database\n    await axios.delete(`/api/campuses/${campusId}`);\n    // Delete successful so change state with dispatch\n    dispatch(ac.deleteCampus(campusId));\n  } catch (err) {\n    console.error(err);\n  }\n};\n\n// Edit Campus\n// THUNK CREATOR:\nexport const editCampusThunk = campus => async dispatch => {\n  // the THUNK\n  try {\n    // API \"put\" call to update student (based on \"id\" and \"student\" object's data) from database\n    let updatedCampus = await axios.put(`/api/campuses/${campus.id}`, campus);\n    // Update successful so change state with dispatch\n    dispatch(ac.editCampus(updatedCampus));\n  } catch (err) {\n    console.error(err);\n  }\n};\n\n// Single Campus\n// THUNK CREATOR:\nexport const fetchCampusThunk = id => async dispatch => {\n  // The THUNK\n  try {\n    // API \"get\" call to get a student data (based on \"id\")from database\n    let res = await axios.get(`/api/campuses/${id}`);\n    dispatch(ac.fetchCampus(res.data));\n  } catch (err) {\n    console.error(err);\n  }\n};\n\n// All Students\n// THUNK CREATOR:\nexport const fetchAllStudentsThunk = () => async dispatch => {\n  // The THUNK\n  try {\n    // API \"get\" call to get \"students\" data from database\n    let res = await axios.get(`/api/students`);\n    // Call Action Creator to return Action object (type + payload with \"students\" data)\n    // Then dispatch the Action object to Reducer to update state \n    dispatch(ac.fetchAllStudents(res.data));\n  } catch (err) {\n    console.error(err);\n  }\n};\n\n// Add Student\n// THUNK CREATOR:\nexport const addStudentThunk = student => async dispatch => {\n  // The THUNK\n  try {\n    // API \"post\" call to add \"student\" object's data to database\n    let res = await axios.post(`/api/students`, student);\n    // Call Action Creator to return Action object (type + payload with new students data)\n    // Then dispatch the Action object to Reducer to update state \n    dispatch(ac.addStudent(res.data));\n    return res.data;\n  } catch (err) {\n    console.error(err);\n  }\n};\n\n// Delete Student\n// THUNK CREATOR:\nexport const deleteStudentThunk = studentId => async dispatch => {\n  // The THUNK\n  try {\n    // API \"delete\" call to delete student (based on \"studentID\") from database\n    await axios.delete(`/api/students/${studentId}`);\n    // Delete successful so change state with dispatch\n    dispatch(ac.deleteStudent(studentId));\n  } catch (err) {\n    console.error(err);\n  }\n};\n\n// Edit Student\n// THUNK CREATOR:\nexport const editStudentThunk = student => async dispatch => {\n  // The THUNK\n  try {\n    // API \"put\" call to update student (based on \"id\" and \"student\" object's data) from database\n    let updatedStudent = await axios.put(`/api/students/${student.id}`, student);\n    // Update successful so change state with dispatch\n    dispatch(ac.editStudent(updatedStudent));\n  } catch (err) {\n    console.error(err);\n  }\n};\n\n// Single Student\n// THUNK CREATOR:\nexport const fetchStudentThunk = id => async dispatch => {\n  // The THUNK\n  try {\n    // API \"get\" call to get a specific student (based on \"id\") data from database\n    let res = await axios.get(`/api/students/${id}`);\n    // Call Action Creator to return Action object (type + payload with student data)\n    // Then dispatch the Action object to Reducer to display student data \n    dispatch(ac.fetchStudent(res.data));\n  } catch (err) {\n    console.error(err);\n  }\n};","map":{"version":3,"names":["ac","axios","require","fetchAllCampusesThunk","dispatch","res","get","fetchAllCampuses","data","err","console","error","addCampusThunk","campus","post","addCampus","deleteCampusThunk","campusId","delete","deleteCampus","editCampusThunk","updatedCampus","put","id","editCampus","fetchCampusThunk","fetchCampus","fetchAllStudentsThunk","fetchAllStudents","addStudentThunk","student","addStudent","deleteStudentThunk","studentId","deleteStudent","editStudentThunk","updatedStudent","editStudent","fetchStudentThunk","fetchStudent"],"sources":["/Users/zeeshan/Desktop/Computer Science/CS395/Assignment-4/client/src/store/thunks.js"],"sourcesContent":["/*==================================================\n/src/store/thunks.js\n\nIt contains all Thunk Creators and Thunks.\n================================================== */\nimport * as ac from './actions/actionCreators';  // Import Action Creators (\"ac\" keyword Action Creator)\nconst axios = require('axios');\n\n//All Campuses\n// THUNK CREATOR:\nexport const fetchAllCampusesThunk = () => async (dispatch) => {  // The THUNK\n  try {\n    // API \"get\" call to get \"campuses\" data from database\n    let res = await axios.get(`/api/campuses`);  \n    // Call Action Creator to return Action object (type + payload with \"campuses\" data)\n    // Then dispatch the Action object to Reducer to update state \n    dispatch(ac.fetchAllCampuses(res.data));\n  } catch(err) {\n    console.error(err);\n  }\n};\n\n// Add Campus\n// THUNK CREATOR:\nexport const addCampusThunk = (campus) => async (dispatch) => { // The THUNK\n  try{\n    // API \"post\" call to add \"campus\" object's datat to database\n    let res = await axios.post(`/api/campuses`, campus);\n    // Call Action Creator to return Action object (type + payload with new campus data)\n    // Then dispatch the Action object to Reducer to update state\n    dispatch(ac.addCampus(res.data));\n    return res.data;\n  } catch(err){\n    console.error(err);\n  }\n};\n\n// Delete Campus\n// THUNK CREATOR: \nexport const deleteCampusThunk = campusId => async dispatch => { // The THUNK\n  try {\n    // API \"delete\" call to delete campus (based on \"campusID\") from database\n    await axios.delete(`/api/campuses/${campusId}`);\n    // Delete successful so change state with dispatch\n    dispatch(ac.deleteCampus(campusId));\n  } catch(err){\n    console.error(err);\n  }\n};\n\n// Edit Campus\n// THUNK CREATOR:\nexport const editCampusThunk = campus => async dispatch => { // the THUNK\n  try{\n    // API \"put\" call to update student (based on \"id\" and \"student\" object's data) from database\n    let updatedCampus = await axios.put(`/api/campuses/${campus.id}`, campus);\n    // Update successful so change state with dispatch\n    dispatch(ac.editCampus(updatedCampus));\n  } catch (err) {\n    console.error(err);\n  }\n};\n\n\n// Single Campus\n// THUNK CREATOR:\nexport const fetchCampusThunk = (id) => async (dispatch) => {  // The THUNK\n  try {\n    // API \"get\" call to get a student data (based on \"id\")from database\n    let res = await axios.get(`/api/campuses/${id}`);  \n    dispatch(ac.fetchCampus(res.data));\n  } catch(err) {\n    console.error(err);\n  }\n};\n\n// All Students\n// THUNK CREATOR:\nexport const fetchAllStudentsThunk = () => async (dispatch) => {  // The THUNK\n  try {\n    // API \"get\" call to get \"students\" data from database\n    let res = await axios.get(`/api/students`);  \n    // Call Action Creator to return Action object (type + payload with \"students\" data)\n    // Then dispatch the Action object to Reducer to update state \n    dispatch(ac.fetchAllStudents(res.data));  \n  } catch(err) {\n    console.error(err);\n  }\n};\n\n// Add Student\n// THUNK CREATOR:\nexport const addStudentThunk = (student) => async (dispatch) => {  // The THUNK\n  try {\n    // API \"post\" call to add \"student\" object's data to database\n    let res = await axios.post(`/api/students`, student);  \n    // Call Action Creator to return Action object (type + payload with new students data)\n    // Then dispatch the Action object to Reducer to update state \n    dispatch(ac.addStudent(res.data));\n    return res.data;\n  } catch(err) {\n    console.error(err);\n  }\n};\n\n// Delete Student\n// THUNK CREATOR:\nexport const deleteStudentThunk = studentId => async dispatch => {  // The THUNK\n  try {\n    // API \"delete\" call to delete student (based on \"studentID\") from database\n    await axios.delete(`/api/students/${studentId}`);  \n    // Delete successful so change state with dispatch\n    dispatch(ac.deleteStudent(studentId));\n  } catch(err) {\n    console.error(err);\n  }\n};\n\n// Edit Student\n// THUNK CREATOR:\nexport const editStudentThunk = student => async dispatch => {  // The THUNK\n  try {\n    // API \"put\" call to update student (based on \"id\" and \"student\" object's data) from database\n    let updatedStudent = await axios.put(`/api/students/${student.id}`, student); \n    // Update successful so change state with dispatch\n    dispatch(ac.editStudent(updatedStudent));\n  } catch(err) {\n    console.error(err);\n  }\n};\n\n// Single Student\n// THUNK CREATOR:\nexport const fetchStudentThunk = id => async dispatch => {  // The THUNK\n  try {\n    // API \"get\" call to get a specific student (based on \"id\") data from database\n    let res = await axios.get(`/api/students/${id}`);  \n    // Call Action Creator to return Action object (type + payload with student data)\n    // Then dispatch the Action object to Reducer to display student data \n    dispatch(ac.fetchStudent(res.data));\n  } catch(err) {\n    console.error(err);\n  }\n};"],"mappings":"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"},"metadata":{},"sourceType":"module"}