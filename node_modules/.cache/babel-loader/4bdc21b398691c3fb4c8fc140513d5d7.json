{"ast":null,"code":"var _jsxFileName = \"/home/tamanna/Desktop/spring_2024/csci 39548/Projects/final-project-client/src/components/containers/AllCampusesContainer.js\";\n/*==================================================\n/src/components/containers/AllCampusesContainer.js\n\nThe Container component is responsible for stateful logic and data fetching, and\npasses data (if any) as props to the corresponding View component.\nIf needed, it also defines the component's \"connect\" function.\n================================================== */\nimport Header from './Header';\nimport { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport { AllCampusesView } from \"../views\";\n\n// Import the necessary action thunks\nimport { fetchAllCampusesThunk, deleteCampusThunk } from \"../../store/thunks\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass AllCampusesContainer extends Component {\n  // Get all campuses data from the back-end database\n  componentDidMount() {\n    this.props.fetchAllCampuses();\n  }\n\n  // Render All Campuses view by passing all campuses data as props to the corresponding View component\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(AllCampusesView, {\n        allCampuses: this.props.allCampuses,\n        deleteCampus: this.props.deleteCampus\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }, this);\n  }\n}\n\n// Define the mapState function to map the Redux store state to props\nconst mapState = state => {\n  return {\n    allCampuses: state.allCampuses\n  };\n};\n\n// Define the mapDispatch function to map dispatch functions to props\nconst mapDispatch = dispatch => {\n  return {\n    fetchAllCampuses: () => dispatch(fetchAllCampusesThunk()),\n    deleteCampus: campusId => dispatch(deleteCampusThunk(campusId))\n  };\n};\n\n// Type check props;\nAllCampusesContainer.propTypes = {\n  allCampuses: PropTypes.array.isRequired,\n  fetchAllCampuses: PropTypes.func.isRequired,\n  deleteCampus: PropTypes.func.isRequired\n};\n\n// Connect the component to the Redux store\nexport default connect(mapState, mapDispatch)(AllCampusesContainer);","map":{"version":3,"names":["Header","Component","PropTypes","connect","AllCampusesView","fetchAllCampusesThunk","deleteCampusThunk","AllCampusesContainer","componentDidMount","props","fetchAllCampuses","render","allCampuses","deleteCampus","mapState","state","mapDispatch","dispatch","campusId","propTypes","array","isRequired","func"],"sources":["/home/tamanna/Desktop/spring_2024/csci 39548/Projects/final-project-client/src/components/containers/AllCampusesContainer.js"],"sourcesContent":["/*==================================================\n/src/components/containers/AllCampusesContainer.js\n\nThe Container component is responsible for stateful logic and data fetching, and\npasses data (if any) as props to the corresponding View component.\nIf needed, it also defines the component's \"connect\" function.\n================================================== */\nimport Header from './Header';\nimport { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport { AllCampusesView } from \"../views\";\n\n// Import the necessary action thunks\nimport { \n  fetchAllCampusesThunk,\n  deleteCampusThunk\n} from \"../../store/thunks\";\n\nclass AllCampusesContainer extends Component {\n  // Get all campuses data from the back-end database\n  componentDidMount() {\n    this.props.fetchAllCampuses();\n  }\n\n  // Render All Campuses view by passing all campuses data as props to the corresponding View component\n  render() {\n    return (\n      <div>\n        <Header />\n        <AllCampusesView\n          allCampuses={this.props.allCampuses}\n          deleteCampus ={this.props.deleteCampus}\n        />\n      </div>\n    );\n  }\n}\n\n// Define the mapState function to map the Redux store state to props\nconst mapState = (state) => {\n  return {\n    allCampuses: state.allCampuses,\n  };\n};  \n\n// Define the mapDispatch function to map dispatch functions to props\nconst mapDispatch = (dispatch) => {\n  return {\n    fetchAllCampuses: () => dispatch(fetchAllCampusesThunk()),\n    deleteCampus: (campusId) => dispatch(deleteCampusThunk(campusId)),\n  };\n};\n\n// Type check props;\nAllCampusesContainer.propTypes = {\n  allCampuses: PropTypes.array.isRequired,\n  fetchAllCampuses: PropTypes.func.isRequired,\n  deleteCampus: PropTypes.func.isRequired,\n};\n\n// Connect the component to the Redux store\nexport default connect(mapState, mapDispatch)(AllCampusesContainer);\n"],"mappings":";AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAOA,MAAM,MAAM,UAAU;AAC7B,SAASC,SAAS,QAAQ,OAAO;AACjC,OAAOC,SAAS,MAAM,YAAY;AAClC,SAASC,OAAO,QAAQ,aAAa;AACrC,SAASC,eAAe,QAAQ,UAAU;;AAE1C;AACA,SACEC,qBAAqB,EACrBC,iBAAiB,QACZ,oBAAoB;AAAC;AAE5B,MAAMC,oBAAoB,SAASN,SAAS,CAAC;EAC3C;EACAO,iBAAiB,GAAG;IAClB,IAAI,CAACC,KAAK,CAACC,gBAAgB,EAAE;EAC/B;;EAEA;EACAC,MAAM,GAAG;IACP,oBACE;MAAA,wBACE,QAAC,MAAM;QAAA;QAAA;QAAA;MAAA,QAAG,eACV,QAAC,eAAe;QACd,WAAW,EAAE,IAAI,CAACF,KAAK,CAACG,WAAY;QACpC,YAAY,EAAG,IAAI,CAACH,KAAK,CAACI;MAAa;QAAA;QAAA;QAAA;MAAA,QACvC;IAAA;MAAA;MAAA;MAAA;IAAA,QACE;EAEV;AACF;;AAEA;AACA,MAAMC,QAAQ,GAAIC,KAAK,IAAK;EAC1B,OAAO;IACLH,WAAW,EAAEG,KAAK,CAACH;EACrB,CAAC;AACH,CAAC;;AAED;AACA,MAAMI,WAAW,GAAIC,QAAQ,IAAK;EAChC,OAAO;IACLP,gBAAgB,EAAE,MAAMO,QAAQ,CAACZ,qBAAqB,EAAE,CAAC;IACzDQ,YAAY,EAAGK,QAAQ,IAAKD,QAAQ,CAACX,iBAAiB,CAACY,QAAQ,CAAC;EAClE,CAAC;AACH,CAAC;;AAED;AACAX,oBAAoB,CAACY,SAAS,GAAG;EAC/BP,WAAW,EAAEV,SAAS,CAACkB,KAAK,CAACC,UAAU;EACvCX,gBAAgB,EAAER,SAAS,CAACoB,IAAI,CAACD,UAAU;EAC3CR,YAAY,EAAEX,SAAS,CAACoB,IAAI,CAACD;AAC/B,CAAC;;AAED;AACA,eAAelB,OAAO,CAACW,QAAQ,EAAEE,WAAW,CAAC,CAACT,oBAAoB,CAAC"},"metadata":{},"sourceType":"module"}