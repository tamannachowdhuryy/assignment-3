[{"/Users/zeeshan/Desktop/Computer Science/CS395/Assignment-4/client/src/index.js":"1","/Users/zeeshan/Desktop/Computer Science/CS395/Assignment-4/client/src/reportWebVitals.js":"2","/Users/zeeshan/Desktop/Computer Science/CS395/Assignment-4/client/src/App.js":"3","/Users/zeeshan/Desktop/Computer Science/CS395/Assignment-4/client/src/store/index.js":"4","/Users/zeeshan/Desktop/Computer Science/CS395/Assignment-4/client/src/components/containers/index.js":"5","/Users/zeeshan/Desktop/Computer Science/CS395/Assignment-4/client/src/store/reducers/index.js":"6","/Users/zeeshan/Desktop/Computer Science/CS395/Assignment-4/client/src/components/containers/HomePageContainer.js":"7","/Users/zeeshan/Desktop/Computer Science/CS395/Assignment-4/client/src/components/containers/AllCampusesContainer.js":"8","/Users/zeeshan/Desktop/Computer Science/CS395/Assignment-4/client/src/components/containers/CampusContainer.js":"9","/Users/zeeshan/Desktop/Computer Science/CS395/Assignment-4/client/src/components/containers/NewCampusContainer.js":"10","/Users/zeeshan/Desktop/Computer Science/CS395/Assignment-4/client/src/components/containers/EditStudentContainer.js":"11","/Users/zeeshan/Desktop/Computer Science/CS395/Assignment-4/client/src/components/containers/NewStudentContainer.js":"12","/Users/zeeshan/Desktop/Computer Science/CS395/Assignment-4/client/src/components/containers/StudentContainer.js":"13","/Users/zeeshan/Desktop/Computer Science/CS395/Assignment-4/client/src/components/containers/EnrollNewStudentContainer.js":"14","/Users/zeeshan/Desktop/Computer Science/CS395/Assignment-4/client/src/components/containers/AllStudentsContainer.js":"15","/Users/zeeshan/Desktop/Computer Science/CS395/Assignment-4/client/src/components/containers/EnrollExistingStudentContainer.js":"16","/Users/zeeshan/Desktop/Computer Science/CS395/Assignment-4/client/src/components/containers/EditCampusContainer.js":"17","/Users/zeeshan/Desktop/Computer Science/CS395/Assignment-4/client/src/store/reducers/campus.js":"18","/Users/zeeshan/Desktop/Computer Science/CS395/Assignment-4/client/src/store/reducers/students.js":"19","/Users/zeeshan/Desktop/Computer Science/CS395/Assignment-4/client/src/store/reducers/campuses.js":"20","/Users/zeeshan/Desktop/Computer Science/CS395/Assignment-4/client/src/store/reducers/student.js":"21","/Users/zeeshan/Desktop/Computer Science/CS395/Assignment-4/client/src/components/containers/Header.js":"22","/Users/zeeshan/Desktop/Computer Science/CS395/Assignment-4/client/src/components/views/HomePageView.js":"23","/Users/zeeshan/Desktop/Computer Science/CS395/Assignment-4/client/src/store/thunks.js":"24","/Users/zeeshan/Desktop/Computer Science/CS395/Assignment-4/client/src/components/views/EnrollNewStudentView.js":"25","/Users/zeeshan/Desktop/Computer Science/CS395/Assignment-4/client/src/components/views/NewStudentView.js":"26","/Users/zeeshan/Desktop/Computer Science/CS395/Assignment-4/client/src/components/views/NewCampusView.js":"27","/Users/zeeshan/Desktop/Computer Science/CS395/Assignment-4/client/src/components/views/AllStudentsView.js":"28","/Users/zeeshan/Desktop/Computer Science/CS395/Assignment-4/client/src/components/views/EnrollExistingStudentView.js":"29","/Users/zeeshan/Desktop/Computer Science/CS395/Assignment-4/client/src/components/views/EditCampusView.js":"30","/Users/zeeshan/Desktop/Computer Science/CS395/Assignment-4/client/src/store/actions/actionCreators.js":"31","/Users/zeeshan/Desktop/Computer Science/CS395/Assignment-4/client/src/store/actions/actionTypes.js":"32","/Users/zeeshan/Desktop/Computer Science/CS395/Assignment-4/client/src/components/views/index.js":"33","/Users/zeeshan/Desktop/Computer Science/CS395/Assignment-4/client/src/components/views/StudentView.js":"34","/Users/zeeshan/Desktop/Computer Science/CS395/Assignment-4/client/src/components/views/AllCampusesView.js":"35","/Users/zeeshan/Desktop/Computer Science/CS395/Assignment-4/client/src/components/views/EditStudentView.js":"36","/Users/zeeshan/Desktop/Computer Science/CS395/Assignment-4/client/src/components/views/CampusView.js":"37"},{"size":932,"mtime":1714080181543,"results":"38","hashOfConfig":"39"},{"size":362,"mtime":1714080181544,"results":"40","hashOfConfig":"39"},{"size":1506,"mtime":1715622792939,"results":"41","hashOfConfig":"39"},{"size":1392,"mtime":1714080181544,"results":"42","hashOfConfig":"39"},{"size":1279,"mtime":1715622792944,"results":"43","hashOfConfig":"39"},{"size":820,"mtime":1714080181544,"results":"44","hashOfConfig":"39"},{"size":1685,"mtime":1715622792943,"results":"45","hashOfConfig":"39"},{"size":2309,"mtime":1715622792939,"results":"46","hashOfConfig":"39"},{"size":3414,"mtime":1715622792940,"results":"47","hashOfConfig":"39"},{"size":2746,"mtime":1715703294655,"results":"48","hashOfConfig":"39"},{"size":2250,"mtime":1715622792941,"results":"49","hashOfConfig":"39"},{"size":3636,"mtime":1715622792943,"results":"50","hashOfConfig":"39"},{"size":2719,"mtime":1715622792943,"results":"51","hashOfConfig":"39"},{"size":3429,"mtime":1715703301663,"results":"52","hashOfConfig":"39"},{"size":2344,"mtime":1715622792939,"results":"53","hashOfConfig":"39"},{"size":3289,"mtime":1715622792941,"results":"54","hashOfConfig":"39"},{"size":3905,"mtime":1715622779028,"results":"55","hashOfConfig":"39"},{"size":1965,"mtime":1715622792948,"results":"56","hashOfConfig":"39"},{"size":1204,"mtime":1714080181544,"results":"57","hashOfConfig":"39"},{"size":1199,"mtime":1714080181544,"results":"58","hashOfConfig":"39"},{"size":943,"mtime":1714080181544,"results":"59","hashOfConfig":"39"},{"size":2237,"mtime":1715622964909,"results":"60","hashOfConfig":"39"},{"size":2892,"mtime":1715622792946,"results":"61","hashOfConfig":"39"},{"size":5602,"mtime":1715622792948,"results":"62","hashOfConfig":"39"},{"size":3200,"mtime":1715703516753,"results":"63","hashOfConfig":"39"},{"size":2968,"mtime":1715622792946,"results":"64","hashOfConfig":"39"},{"size":2675,"mtime":1715703537247,"results":"65","hashOfConfig":"39"},{"size":3655,"mtime":1715622792944,"results":"66","hashOfConfig":"39"},{"size":2442,"mtime":1715622898217,"results":"67","hashOfConfig":"39"},{"size":2782,"mtime":1715622792945,"results":"68","hashOfConfig":"39"},{"size":1732,"mtime":1715622792947,"results":"69","hashOfConfig":"39"},{"size":719,"mtime":1715622792947,"results":"70","hashOfConfig":"39"},{"size":1027,"mtime":1714080181543,"results":"71","hashOfConfig":"39"},{"size":2314,"mtime":1715703359104,"results":"72","hashOfConfig":"39"},{"size":3271,"mtime":1715622867281,"results":"73","hashOfConfig":"39"},{"size":3172,"mtime":1715622792945,"results":"74","hashOfConfig":"39"},{"size":5792,"mtime":1715622881278,"results":"75","hashOfConfig":"39"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},"1b0k7cd",{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105","usedDeprecatedRules":"78"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110","usedDeprecatedRules":"78"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"123","usedDeprecatedRules":"78"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"128","usedDeprecatedRules":"78"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"139","usedDeprecatedRules":"78"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"144","usedDeprecatedRules":"78"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"157","usedDeprecatedRules":"78"},"/Users/zeeshan/Desktop/Computer Science/CS395/Assignment-4/client/src/index.js",[],["158","159"],"/Users/zeeshan/Desktop/Computer Science/CS395/Assignment-4/client/src/reportWebVitals.js",[],"/Users/zeeshan/Desktop/Computer Science/CS395/Assignment-4/client/src/App.js",[],"/Users/zeeshan/Desktop/Computer Science/CS395/Assignment-4/client/src/store/index.js",[],"/Users/zeeshan/Desktop/Computer Science/CS395/Assignment-4/client/src/components/containers/index.js",[],"/Users/zeeshan/Desktop/Computer Science/CS395/Assignment-4/client/src/store/reducers/index.js",[],"/Users/zeeshan/Desktop/Computer Science/CS395/Assignment-4/client/src/components/containers/HomePageContainer.js",[],"/Users/zeeshan/Desktop/Computer Science/CS395/Assignment-4/client/src/components/containers/AllCampusesContainer.js",[],"/Users/zeeshan/Desktop/Computer Science/CS395/Assignment-4/client/src/components/containers/CampusContainer.js",[],"/Users/zeeshan/Desktop/Computer Science/CS395/Assignment-4/client/src/components/containers/NewCampusContainer.js",[],"/Users/zeeshan/Desktop/Computer Science/CS395/Assignment-4/client/src/components/containers/EditStudentContainer.js",[],"/Users/zeeshan/Desktop/Computer Science/CS395/Assignment-4/client/src/components/containers/NewStudentContainer.js",[],"/Users/zeeshan/Desktop/Computer Science/CS395/Assignment-4/client/src/components/containers/StudentContainer.js",[],"/Users/zeeshan/Desktop/Computer Science/CS395/Assignment-4/client/src/components/containers/EnrollNewStudentContainer.js",["160"],"/*==================================================\nNewStudentContainer.js\n\nThe Container component is responsible for stateful logic and data fetching, and\npasses data (if any) as props to the corresponding View component.\nIf needed, it also defines the component's \"connect\" function.\n================================================== */\nimport Header from './Header';\nimport { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\n\nimport EnrollNewStudentView from '../views/EnrollNewStudentView';\nimport { addStudentThunk, enrollNewStudentThunk } from '../../store/thunks';\n\nclass EnrollNewStudentContainer extends Component {\n  // Initialize state\n  constructor(props){\n    super(props);\n    this.state = {\n      firstname: \"\", \n      lastname: \"\", \n      imageUrl: \"\",\n      gpa: 0.0,\n      email: \"\",\n      campusId: null, \n      redirect: false, \n      redirectId: null\n    };\n  }\n\n  // Capture input data when it is entered\n  handleChange = event => {\n    this.setState({\n      [event.target.name]: event.target.value\n    });\n  }\n\n  // Take action after user click the submit button\n  handleSubmit = async event => {\n    event.preventDefault();  // Prevent browser reload/refresh after submit.\n    let student = {\n        firstname: this.state.firstname,\n        lastname: this.state.lastname,\n        campusId: this.props.location.query.campus_id,\n        email: this.state.email,\n        imageUrl: this.state.imageUrl,\n        gpa: this.state.gpa\n    };\n    \n    // Add new student in back-end database\n    let newStudent = await this.props.addStudent(student);\n\n    // Update state, and trigger redirect to show the new student\n    this.setState({\n      firstname: \"\", \n      lastname: \"\", \n      url: \"\",\n      gpa: 0.0,\n      email: \"\",\n      campusId: null, \n      redirect: true, \n      redirectId: student.campusId\n    });\n  }\n\n  // Unmount when the component is being removed from the DOM:\n  componentWillUnmount() {\n      this.setState({redirect: false, redirectId: null});\n  }\n\n  // Render new student input form\n  render() {\n    // Redirect to new student's page after submit\n\n    // Display the input form via the corresponding View component\n    return (\n      <div>\n        <Header />\n        <EnrollNewStudentView\n          campus_id = {this.props.location.query} \n          handleChange = {this.handleChange} \n          handleSubmit={this.handleSubmit}      \n        />\n        {this.state.redirect && (\n            <Redirect to={`/campus/${this.state.redirectId}`} />\n        )}\n      </div>          \n    );\n  }\n}\n\n// The following input argument is passed to the \"connect\" function used by \"NewStudentContainer\" component to connect to Redux Store.\n// The \"mapDispatch\" argument is used to dispatch Action (Redux Thunk) to Redux Store.\n// The \"mapDispatch\" calls the specific Thunk to dispatch its action. The \"dispatch\" is a function of Redux Store.\nconst mapDispatch = (dispatch) => {\n    return({\n        addStudent: (student) => dispatch(addStudentThunk(student)),\n        enrollNewStudent: (student) => dispatch(enrollNewStudentThunk(student)),\n    })\n}\n\n// Export store-connected container by default\n// NewStudentContainer uses \"connect\" function to connect to Redux Store and to read values from the Store \n// (and re-read the values when the Store State updates).\nexport default connect(null, mapDispatch)(EnrollNewStudentContainer);","/Users/zeeshan/Desktop/Computer Science/CS395/Assignment-4/client/src/components/containers/AllStudentsContainer.js",[],"/Users/zeeshan/Desktop/Computer Science/CS395/Assignment-4/client/src/components/containers/EnrollExistingStudentContainer.js",["161","162","163"],"/*==================================================\nAllStudentsContainer.js\n\nThe Container component is responsible for stateful logic and data fetching, and\npasses data (if any) as props to the corresponding View component.\nIf needed, it also defines the component's \"connect\" function.\n================================================== */\nimport Header from './Header';\nimport { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { withRouter, Redirect } from \"react-router-dom\";\n\nimport { \n  fetchAllStudentsThunk,\n  enrollExistingStudentThunk,\n  editStudentThunk\n} from '../../store/thunks';\n\nimport EnrollExistingStudentView from '../views/EnrollExistingStudentView';\nimport { enrollExistingStudent } from '../../store/actions/actionCreators';\n\nclass EnrollExistingStudentContainer extends Component {\n  // Get all students data from back-end database\n  componentDidMount() {\n    // this.props.fetchAllStudents();\n  }\n\n  constructor(props){\n    super(props);\n    this.state = {\n      redirect: false, \n      redirectId: null\n    };\n  }\n\n\n  enrollStudent = async (student_id, campus_id) => {\n    // Dispatch action to edit student\n    let {student} = this.props; \n    \n    student = {\n        firstname: this.state.firstname,\n        lastname: this.state.lastname,\n        campusId: campus_id.campus_id,\n        id: student_id\n    };\n\n    // Edit student\n    let newStudent = await this.props.editStudent(student);\n    this.setState({\n        redirect: true,\n        redirectId: student.campusId\n    });\n  };\n\n  // Render All Students view by passing all students data as props to the corresponding View component\n  render(){\n    return(\n      <div>\n        <Header />\n        <EnrollExistingStudentView\n            campus_id = {this.props.location.query} \n            students={this.props.allStudents}\n            enrollStudent={this.enrollStudent}      \n        />\n        {this.state.redirect && (\n            <Redirect to={`/campus/${this.state.redirectId}`} />\n        )}\n      </div>\n    )\n  }\n}\n\n// The following 2 input arguments are passed to the \"connect\" function used by \"AllStudentsContainer\" component to connect to Redux Store.\n// 1. The \"mapState\" argument specifies the data from Redux Store that the component needs.\n// The \"mapState\" is called when the Store State changes, and it returns a data object of \"allStudents\".\nconst mapState = (state) => {\n  return {\n    allStudents: state.allStudents,  // Get the State object from Reducer \"allStudents\"\n  };\n};\n// 2. The \"mapDispatch\" argument is used to dispatch Action (Redux Thunk) to Redux Store.\n// The \"mapDispatch\" calls the specific Thunk to dispatch its action. The \"dispatch\" is a function of Redux Store.\nconst mapDispatch = (dispatch) => {\n  return {\n    fetchAllStudents: () => dispatch(fetchAllStudentsThunk()),\n    editStudent: (student) => dispatch(editStudentThunk(student)),\n    // enrollExistingStudent: (student) => dispatch(enrollExistingStudentThunk(student)),\n  };\n};\n\n// Export store-connected container by default\n// AllStudentsContainer uses \"connect\" function to connect to Redux Store and to read values from the Store \n// (and re-read the values when the Store State updates).\nexport default withRouter(connect(mapState, mapDispatch)(EnrollExistingStudentContainer));","/Users/zeeshan/Desktop/Computer Science/CS395/Assignment-4/client/src/components/containers/EditCampusContainer.js",[],"/Users/zeeshan/Desktop/Computer Science/CS395/Assignment-4/client/src/store/reducers/campus.js",[],"/Users/zeeshan/Desktop/Computer Science/CS395/Assignment-4/client/src/store/reducers/students.js",[],"/Users/zeeshan/Desktop/Computer Science/CS395/Assignment-4/client/src/store/reducers/campuses.js",[],"/Users/zeeshan/Desktop/Computer Science/CS395/Assignment-4/client/src/store/reducers/student.js",[],"/Users/zeeshan/Desktop/Computer Science/CS395/Assignment-4/client/src/components/containers/Header.js",["164"],"/*==================================================\nHeader.js\n\nIt contains the Header component to be displayed on every page.\nThe header contains navigation links to every other page.\n================================================== */\n// Import \"material\" library for building UI with React components\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport { makeStyles } from '@material-ui/core/styles';\n\nimport { Link } from 'react-router-dom';\n\n// Define styling for the header\nconst useStyles = makeStyles(theme => ({\n  root: {\n    flexGrow: 1,\n  },\n  title: {\n    flexGrow: 1,\n    textAlign: 'left',\n    fontWeight: 'bold',\n    fontFamily: 'sans-serif', \n    fontSize: '35px', \n    color: 'white',\n  },\n  appBar:{\n    shadows: ['none'],\n    backgroundColor: '#0004D3',\n  },\n  greeting:{\n    display: 'flex',\n    justifyContent: 'center',\n    backgroundColor: 'white',\n    width: \"50%\",\n    margin: \"auto\",\n    backgroundColor: 'white',\n  },\n  links:{\n    textDecoration: 'none',\n  }\n}));\n\n// Header component, displayed on every page\n// Links to every other page\nconst Header = () => {\n  const classes = useStyles();\n  return (\n    <div className={classes.root}>\n      <AppBar position=\"static\" elevation={0} className={classes.appBar}>\n        <Toolbar>\n          <Typography variant=\"h6\" className={classes.title} color=\"inherit\" >\n            Campus Management System\n          </Typography>\n\n          <Link className={classes.links} to={'/'} >\n            <Button variant=\"contained\" color=\"primary\" style={{marginRight: '10px'}}>\n              Home\n            </Button>\n          </Link>\n\n          <Link className={classes.links} to={'/campuses'} >\n            <Button variant=\"contained\" color=\"primary\" style={{marginRight: '10px'}}>\n              All Campuses\n            </Button>\n          </Link>\n\n          <Link className={classes.links} to={'/students'} >\n            <Button variant=\"contained\" color=\"primary\">\n              All Students\n            </Button>\n          </Link>\n        </Toolbar>\n      </AppBar>\n    </div>\n  );    \n}\n\nexport default Header;","/Users/zeeshan/Desktop/Computer Science/CS395/Assignment-4/client/src/components/views/HomePageView.js",[],"/Users/zeeshan/Desktop/Computer Science/CS395/Assignment-4/client/src/store/thunks.js",["165"],"/*==================================================\n/src/store/thunks.js\n\nIt contains all Thunk Creators and Thunks.\n================================================== */\nimport * as ac from './actions/actionCreators';  // Import Action Creators (\"ac\" keyword Action Creator)\nimport { useHistory } from 'react-router-dom';\nconst axios = require('axios');\n\n//All Campuses\n// THUNK CREATOR:\nexport const fetchAllCampusesThunk = () => async (dispatch) => {  // The THUNK\n  try {\n    // API \"get\" call to get \"campuses\" data from database\n    let res = await axios.get(`/api/campuses`);  \n    // Call Action Creator to return Action object (type + payload with \"campuses\" data)\n    // Then dispatch the Action object to Reducer to update state \n    dispatch(ac.fetchAllCampuses(res.data));\n  } catch(err) {\n    console.error(err);\n  }\n};\n\n// Single Campus\n// THUNK CREATOR:\nexport const addCampusThunk = (campus) => async (dispatch) => {  // The THUNK\n  try {\n    // Post request to add student to database\n    let res = await axios.post(`/api/campuses`, campus);  \n    \n    dispatch(ac.addCampus(res.data));\n    return res.data;\n  } catch(err) {\n    console.error(err);\n  }\n};\n\nexport const fetchCampusThunk = (id) => async (dispatch) => {  // The THUNK\n  try {\n    // API \"get\" call to get a student data (based on \"id\")from database\n    let res = await axios.get(`/api/campuses/${id}`);  \n    dispatch(ac.fetchCampus(res.data));\n  } catch(err) {\n    console.error(err);\n  }\n};\n\nexport const editCampusThunk = campus => async dispatch => {  // The THUNK\n  try {\n    // Use put request to update campus information\n    let updatedCampus = await axios.put(`/api/campuses/${campus.id}`, campus); \n    // Update successful so change state with dispatch\n    dispatch(ac.editCampus(updatedCampus));\n  } catch(err) {\n    console.error(err);\n  }\n};\n\nexport const deleteCampusThunk = campusId => async dispatch => {  // The THUNK\n  try {\n    // Delete campus from database using delete request call\n    await axios.delete(`/api/campuses/${campusId}`);  \n    // Delete successful so change state with dispatch\n    dispatch(ac.deleteCampus(campusId));\n  } catch(err) {\n    console.error(err);\n  }\n};\n\nexport const enrollExistingStudentThunk = (student) => async (dispatch) => {\n  try {\n    // Perform the API call to enroll the student in the campus\n    let res = await axios.get(`/api/students`);  \n    dispatch(ac.fetchAllStudents(res.data));  \n\n    const response = await axios.put(`/api/enrollexisting`, student);\n    \n    // Dispatch the action to update the state with the enrolled student\n    dispatch(ac.enrollExistingStudent(response.data));\n  } catch (error) {\n    console.error(error);\n  }\n};\n\nexport const enrollNewStudentThunk = (studentId, studentData) => async (dispatch) => {\n  try {\n    // Making a PUT request to the enrollnew endpoint with studentId and studentData\n    const response = await axios.put(`/api/${studentId}/enrollnew`, studentData);\n    \n    // Dispatch the action to update the state with the new student data\n    dispatch(ac.enrollNewStudent(response.data));\n  } catch (error) {\n    console.error('Enrolling new student failed:', error);\n  }\n};\n\n\n// All Students\n// THUNK CREATOR:\nexport const fetchAllStudentsThunk = () => async (dispatch) => {  // The THUNK\n  try {\n    // API \"get\" call to get \"students\" data from database\n    let res = await axios.get(`/api/students`);  \n    // Call Action Creator to return Action object (type + payload with \"students\" data)\n    // Then dispatch the Action object to Reducer to update state \n    dispatch(ac.fetchAllStudents(res.data));  \n  } catch(err) {\n    console.error(err);\n  }\n};\n\n// Add Student\n// THUNK CREATOR:\nexport const addStudentThunk = (student) => async (dispatch) => {  // The THUNK\n  try {\n    // API \"post\" call to add \"student\" object's data to database\n    let res = await axios.post(`/api/students`, student);  \n    // Call Action Creator to return Action object (type + payload with new students data)\n    // Then dispatch the Action object to Reducer to update state \n    dispatch(ac.addStudent(res.data));\n    return res.data;\n  } catch(err) {\n    console.error(err);\n  }\n};\n\n// Delete Student\n// THUNK CREATOR:\nexport const deleteStudentThunk = studentId => async dispatch => {  // The THUNK\n  try {\n    // API \"delete\" call to delete student (based on \"studentID\") from database\n    await axios.delete(`/api/students/${studentId}`);  \n    // Delete successful so change state with dispatch\n    dispatch(ac.deleteStudent(studentId));\n    // Redirect to the \"All Students\" page\n  } catch(err) {\n    console.error(err);\n  }\n};\n\n// Edit Student\n// THUNK CREATOR:\nexport const editStudentThunk = student => async dispatch => {  // The THUNK\n  try {\n    // console.log(student);\n    // API \"put\" call to update student (based on \"id\" and \"student\" object's data) from database\n    let updatedStudent = await axios.put(`/api/students/${student.id}`, student); \n    // Update successful so change state with dispatch\n    dispatch(ac.editStudent(updatedStudent));\n  } catch(err) {\n    console.error(err);\n  }\n};\n\n// Single Student\n// THUNK CREATOR:\nexport const fetchStudentThunk = id => async dispatch => {  // The THUNK\n  try {\n    // API \"get\" call to get a specific student (based on \"id\") data from database\n    let res = await axios.get(`/api/students/${id}`);  \n    // Call Action Creator to return Action object (type + payload with student data)\n    // Then dispatch the Action object to Reducer to display student data \n    dispatch(ac.fetchStudent(res.data));\n  } catch(err) {\n    console.error(err);\n  }\n};","/Users/zeeshan/Desktop/Computer Science/CS395/Assignment-4/client/src/components/views/EnrollNewStudentView.js",[],"/Users/zeeshan/Desktop/Computer Science/CS395/Assignment-4/client/src/components/views/NewStudentView.js",[],"/Users/zeeshan/Desktop/Computer Science/CS395/Assignment-4/client/src/components/views/NewCampusView.js",[],"/Users/zeeshan/Desktop/Computer Science/CS395/Assignment-4/client/src/components/views/AllStudentsView.js",[],"/Users/zeeshan/Desktop/Computer Science/CS395/Assignment-4/client/src/components/views/EnrollExistingStudentView.js",["166","167","168","169"],"/*==================================================\nAllStudentsView.js\n\nThe Views component is responsible for rendering web page with data provided by the corresponding Container component.\nIt constructs a React component to display the all students view page.\n================================================== */\nimport { Link } from \"react-router-dom\";\nimport Button from '@material-ui/core/Button';\nimport { campus } from \"../../store/reducers\";\n\nconst EnrollExistingStudentView = (props) => {\n  const { students, campus_id, enrollStudent } = props;\n  // Only display students who are not enrolled at a campus\n  // const filteredStudents = students.filter(student => student.campusId === null);\n\n  const handleEnrollClick = (studentId, campusId) => {\n    // Call the enrollStudent function with studentId and campusId\n    enrollStudent(studentId, campusId);\n  };\n\n  if (students.length == 0) {\n    return (\n      <div>\n        <h3>No students to enroll!</h3>\n        <Link to={`/campuses`}>\n          <Button style={{color:\"white\", backgroundColor:\"grey\", marginRight:\"0.5em\"}}>Go Back to All Campuses</Button>\n        </Link>\n      </div>\n    )  \n  }\n  // If there is at least one student, render All Students view \n  if (students.length > 0) {\n    return (\n      <div>\n        <h1>All Students</h1>\n  \n        {students.map((student) => {\n            let name = student.firstname + \" \" + student.lastname;\n            return (\n              <div key={student.id}>\n                <Link to={`/student/${student.id}`}>\n                  <h2>{name}</h2>\n                </Link>\n                <img\n                  src={student.imageUrl || \"https://www.pngfind.com/pngs/m/163-1631127_student-school-study-skills-college-test-students-pictures.png\"}  // Use default if imageUrl is falsy\n                  style={{ maxWidth: '100%', maxHeight: '100px', borderRadius:'50%', height:'auto', maxWidth:'100%' }}  // Adjust styling as needed\n                />\n                <br></br>\n                <br></br>\n                <Button style={{ color: 'white', backgroundColor: 'teal' }} onClick={() => handleEnrollClick(student.id, campus_id)}>\n                  Enroll Student\n                </Button>\n                <br/>\n                <br/>\n                <hr/>\n              </div>\n            );\n          }\n        )}\n        <br/>\n        \n        <br/><br/>\n      </div>\n    );\n  }\n};\n\n\nexport default EnrollExistingStudentView;","/Users/zeeshan/Desktop/Computer Science/CS395/Assignment-4/client/src/components/views/EditCampusView.js",[],"/Users/zeeshan/Desktop/Computer Science/CS395/Assignment-4/client/src/store/actions/actionCreators.js",["170"],"import { campus } from '../reducers';\nimport * as at from './actionTypes';\n\n// ACTION CREATORS;\n/** needs to be an action creator\n * for each action type\n */\n\n// All Campuses\nexport const fetchAllCampuses = (campuses) => {\n  return {\n    type: at.FETCH_ALL_CAMPUSES,\n    payload: campuses,\n  };\n};\n\n//Single Campus\nexport const fetchCampus = (campus) => {\n  return {\n    type: at.FETCH_CAMPUS,\n    payload: campus,\n  };\n};\nexport const addCampus = (campus) => {\n  return {\n    type: at.ADD_CAMPUS,\n    payload: campus,\n  };\n};\nexport const deleteCampus = (campusId) => {\n  return {\n    type: at.DELETE_CAMPUS,\n    payload: campusId,\n  };\n};\nexport const editCampus = (campus) => {\n  return {\n    type: at.EDIT_CAMPUS,\n    payload: campus,\n  };\n};\n\nexport const enrollNewStudent = (student) => {\n  return {\n    type: at.ENROLL_NEW_STUDENT,\n    payload: student,\n  };\n};\n\nexport const enrollExistingStudent = (student) => {\n  return {\n    type: at.ENROLL_EXISTING_STUDENT,\n    payload: student,\n  };\n};\n\nexport const unenrollStudent = (studentId) => {\n  return {\n    type: at.UNENROLL_STUDENT,\n    payload: studentId,\n  };\n};\n\n//All Students\nexport const fetchAllStudents = (students) => {\n  return {\n    type: at.FETCH_ALL_STUDENTS,\n    payload: students,\n  };\n};\n\nexport const addStudent = (student) => {\n  return {\n    type: at.ADD_STUDENT,\n    payload: student,\n  };\n};\n\nexport const deleteStudent = (studentId) => {\n  return {\n    type: at.DELETE_STUDENT,\n    payload: studentId,\n  };\n};\n\n\nexport const editStudent = (student) => {\n  return {\n    type: at.EDIT_STUDENT,\n    payload: student,\n  };\n};\n\n//Single Student\nexport const fetchStudent = (student) => {\n  return {\n    type: at.FETCH_STUDENT,\n    payload: student,\n  };\n};","/Users/zeeshan/Desktop/Computer Science/CS395/Assignment-4/client/src/store/actions/actionTypes.js",[],"/Users/zeeshan/Desktop/Computer Science/CS395/Assignment-4/client/src/components/views/index.js",[],"/Users/zeeshan/Desktop/Computer Science/CS395/Assignment-4/client/src/components/views/StudentView.js",[],"/Users/zeeshan/Desktop/Computer Science/CS395/Assignment-4/client/src/components/views/AllCampusesView.js",[],"/Users/zeeshan/Desktop/Computer Science/CS395/Assignment-4/client/src/components/views/EditStudentView.js",[],"/Users/zeeshan/Desktop/Computer Science/CS395/Assignment-4/client/src/components/views/CampusView.js",["171","172"],"/*==================================================\nCampusView.js\n\nThe Views component is responsible for rendering web page with data provided by the corresponding Container component.\nIt constructs a React component to display a single campus and its students (if any).\n================================================== */\nimport { Link } from \"react-router-dom\";\nimport Button from \"@material-ui/core/Button\";\nimport {\n  unenrollStudent,\n  enrollStudent,\n} from \"../../store/actions/actionCreators\";\n\n// Take in props data to construct the component\nconst CampusView = (props) => {\n  const { campus, deleteCampus, unenrollStudent } = props;\n  const campus_id = campus.id;\n  // Render a single Campus view with list of its students\n  return (\n    <div>\n      <h1 style={{ textDecoration: \"underline\" }}>{campus.name}</h1>\n      <div\n        style={{\n          paddingTop: \"2em\",\n          paddingBottom: \"2em\",\n          marginRight: \"10em\",\n          marginLeft: \"10em\",\n        }}\n      >\n        <img\n          src={\n            campus.imageUrl ||\n            \"https://pbs.twimg.com/profile_images/1676600958153904131/OSV4hFd7_400x400.png\"\n          }\n          alt={`Campus - ${campus.name}`}\n          style={{\n            maxWidth: \"100%\",\n            maxHeight: \"200px\",\n            borderRadius: \"8px\",\n            boxShadow: \"0 4px 8px rgba(0, 0, 0, 0.1)\",\n          }}\n        />\n        <div>\n          <p>\n            <strong style={{ fontWeight: \"bold\" }}>Location: {\" \"}</strong>\n            <a\n              href={`https://www.google.com/maps/search/?api=1&query=${encodeURIComponent(\n                campus.address\n              )}`}\n              style={{\n                textDecoration: \"none\", \n                color: \"blue\",\n              }}\n              target=\"_blank\" \n              rel=\"noopener noreferrer\"\n            >\n              {campus.address}\n            </a>\n          </p>\n\n          <p>\n            <strong style={{ fontWeight: \"bold\" }}>Description:</strong>{\" \"}\n            {campus.description}\n          </p>\n        </div>\n\n        <div style={{ marginTop: \"1em\" }}>\n          <Link to={`/editcampus/${campus.id}`}>\n            <Button\n              style={{\n                color: \"white\",\n                backgroundColor: \"grey\",\n                marginRight: \"0.5em\",\n              }}\n            >\n              Edit Campus\n            </Button>\n          </Link>\n          <Button\n            style={{ color: \"white\", backgroundColor: \"red\" }}\n            onClick={() => deleteCampus(campus.id)}\n          >\n            Delete Campus\n          </Button>\n        </div>\n        <hr style={{ color: \"white\", margin: \"10px\" }} />\n        <h3>Total Students Enrolled: {campus.students.length}</h3>\n\n        {/* Table for student information, only display if there are students enrolled */}\n        {campus.students.length > 0 && (\n          <div\n            style={{\n              marginBottom: \"0.85em\",\n              paddingLeft: \"2em\",\n              paddingRight: \"2em\",\n              overflowX: \"auto\",\n            }}\n          >\n            <table\n              style={{\n                width: \"100%\",\n                borderCollapse: \"collapse\",\n                textAlign: \"center\",\n              }}\n            >\n              <thead>\n                <tr>\n                  <th\n                    style={{\n                      border: \"1px solid black\",\n                      backgroundColor: \"white\",\n                    }}\n                  >\n                    Student Name\n                  </th>\n                  <th\n                    style={{\n                      border: \"1px solid black\",\n                      backgroundColor: \"white\",\n                    }}\n                  >\n                    Enroll/Unenroll\n                  </th>\n                </tr>\n              </thead>\n              <tbody>\n                {campus.students.map((student) => (\n                  <tr key={student.id}>\n                    <td\n                      style={{\n                        border: \"1px solid black\",\n                        backgroundColor: \"#003546\",\n                        padding: \"20px\",\n                      }}\n                    >\n                      <Link\n                        to={`/student/${student.id}`}\n                        style={{ color: \"white\" }}\n                      >\n                        {student.firstname} {student.lastname}\n                      </Link>\n                    </td>\n                    <td\n                      style={{\n                        border: \"1px solid black\",\n                        backgroundColor: \"#003546\",\n                      }}\n                    >\n                      <Button\n                        style={{ color: \"white\", backgroundColor: \"red\" }}\n                        onClick={() => unenrollStudent(student)}\n                      >\n                        Unenroll\n                      </Button>\n                    </td>\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n          </div>\n        )}\n\n        <Link\n          to={{\n            pathname: `/:id/enrollnew`,\n            query: { campus_id },\n          }}\n        >\n          <Button\n            style={{\n              color: \"white\",\n              backgroundColor: \"#0B6623\",\n              margin: \"10px\",\n            }}\n          >\n            Enroll New Student\n          </Button>\n        </Link>\n        <Link\n          to={{\n            pathname: `/enrollexisting`,\n            query: { campus_id },\n          }}\n        >\n          <Button style={{ color: \"white\", backgroundColor: \"#0B6623\" }}>\n            Enroll Existing Student\n          </Button>\n        </Link>\n      </div>\n    </div>\n  );\n};\n\nexport default CampusView;\n",{"ruleId":"173","replacedBy":"174"},{"ruleId":"175","replacedBy":"176"},{"ruleId":"177","severity":1,"message":"178","line":52,"column":9,"nodeType":"179","messageId":"180","endLine":52,"endColumn":19},{"ruleId":"177","severity":1,"message":"181","line":15,"column":3,"nodeType":"179","messageId":"180","endLine":15,"endColumn":29},{"ruleId":"177","severity":1,"message":"182","line":20,"column":10,"nodeType":"179","messageId":"180","endLine":20,"endColumn":31},{"ruleId":"177","severity":1,"message":"178","line":49,"column":9,"nodeType":"179","messageId":"180","endLine":49,"endColumn":19},{"ruleId":"183","severity":1,"message":"184","line":39,"column":5,"nodeType":"185","messageId":"186","endLine":39,"endColumn":20},{"ruleId":"177","severity":1,"message":"187","line":7,"column":10,"nodeType":"179","messageId":"180","endLine":7,"endColumn":20},{"ruleId":"177","severity":1,"message":"188","line":9,"column":10,"nodeType":"179","messageId":"180","endLine":9,"endColumn":16},{"ruleId":"189","severity":1,"message":"190","line":21,"column":23,"nodeType":"191","messageId":"186","endLine":21,"endColumn":25},{"ruleId":"192","severity":1,"message":"193","line":44,"column":17,"nodeType":"194","endLine":47,"endColumn":19},{"ruleId":"183","severity":1,"message":"195","line":46,"column":101,"nodeType":"185","messageId":"186","endLine":46,"endColumn":109},{"ruleId":"177","severity":1,"message":"188","line":1,"column":10,"nodeType":"179","messageId":"180","endLine":1,"endColumn":16},{"ruleId":"177","severity":1,"message":"196","line":10,"column":3,"nodeType":"179","messageId":"180","endLine":10,"endColumn":18},{"ruleId":"177","severity":1,"message":"197","line":11,"column":3,"nodeType":"179","messageId":"180","endLine":11,"endColumn":16},"no-native-reassign",["198"],"no-negated-in-lhs",["199"],"no-unused-vars","'newStudent' is assigned a value but never used.","Identifier","unusedVar","'enrollExistingStudentThunk' is defined but never used.","'enrollExistingStudent' is defined but never used.","no-dupe-keys","Duplicate key 'backgroundColor'.","ObjectExpression","unexpected","'useHistory' is defined but never used.","'campus' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","Duplicate key 'maxWidth'.","'unenrollStudent' is defined but never used.","'enrollStudent' is defined but never used.","no-global-assign","no-unsafe-negation"]